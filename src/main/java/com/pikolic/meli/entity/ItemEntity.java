package com.pikolic.meli.entity;

import jakarta.persistence.*;
import lombok.*;

import java.util.ArrayList;
import java.util.List;

/**
 * JPA entity representing an item in the Meli e-commerce system.
 * <p>
 * This entity maps to the {@code item} table in the database and contains
 * information about a product, including its name, description, and price.
 * It maintains a one-to-many relationship with {@link OrderEntity}, representing
 * all orders that include this item.
 * </p>
 *
 * <p>Relationship details:</p>
 * <ul>
 *     <li>{@link #orders}: One {@code ItemEntity} can be associated with multiple {@link OrderEntity} objects.</li>
 *     <li>{@code cascade = CascadeType.PERSIST}: Persist operations on the item will cascade to associated orders.</li>
 *     <li>{@code orphanRemoval = true}: Removing an order from the list will delete it from the database.</li>
 * </ul>
 *
 * <p>Lombok annotations:</p>
 * <ul>
 *     <li>{@link Getter} / {@link Setter}: Automatically generates getters and setters for all fields.</li>
 *     <li>{@link Builder}: Provides a fluent builder API for creating instances.</li>
 *     <li>{@link NoArgsConstructor} / {@link AllArgsConstructor}: Generates constructors with no arguments and with all arguments.</li>
 * </ul>
 *
 * @author Angel Lomel√≠
 * @see OrderEntity
 */
@Entity
@Table(name = "item")
@Getter
@Setter
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ItemEntity {

    /** Unique identifier for the item. Auto-generated by the database. */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /** The name of the item. Cannot be null. */
    @Column(nullable = false)
    private String name;

    /** A description of the item. Optional. */
    private String description;

    /** The price of the item. Cannot be null. */
    @Column(nullable = false)
    private Double price;

    /**
     * List of orders that include this item.
     * <p>
     * One-to-many relationship with {@link OrderEntity}.
     * Cascade persists new orders when the item is saved, and orphanRemoval
     * ensures that removed orders are deleted from the database.
     * </p>
     */
    @OneToMany(mappedBy = "item", cascade = CascadeType.PERSIST, orphanRemoval = true)
    private List<OrderEntity> orders = new ArrayList<>();
}
